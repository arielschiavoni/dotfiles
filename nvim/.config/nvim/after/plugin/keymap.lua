local utils = require("ariel.utils")

-- general purpose keymaps
vim.keymap.set("n", "<leader><CR>", utils.reload_config, { desc = "reload neovim config" })
vim.keymap.set("n", "<C-f>", ":silent !tmux new-window tmux-sessionizer<CR>", { desc = "create tmux session" })
vim.keymap.set("n", "<C-s>", ":silent !tmux new-window tmux-find-session<CR>", { desc = "find tmux session" })
vim.keymap.set("n", "<leader>x", ":silent !chmod +x %<CR>", { desc = "make current buffer executable" })
vim.keymap.set("n", "<leader>w", ":w!<CR>", { desc = "save current buffer" })
vim.keymap.set("n", "<leader>W", ":wa!<CR>", { desc = "save all open buffers" })
vim.keymap.set("n", "<leader>n", ":enew<CR>", { desc = "create new buffer" })
vim.keymap.set("n", "<leader><leader>", ":bd<CR>", { desc = "close current buffer" })
vim.keymap.set("n", "<leader>|", ":vsplit<CR>", { desc = "create vertical split" })
vim.keymap.set("n", "<leader>-", ":split<CR>", { desc = "create horizontal split" })
vim.keymap.set("n", "<leader>+", ":Lazy<CR>", { desc = "open lazy plugin manager" })
vim.keymap.set("n", "<leader>~", ":let @* = expand('%:p')<CR>", { desc = "copy buffer's absolute path to clipboard" })
vim.keymap.set("n", "<leader>`", ":let @* = expand('%:t')<CR>", { desc = "copy buffer's file name to clipboard" })
vim.keymap.set("n", "<leader>cd", ":put =strftime('%d/%m/%Y')<CR>", { desc = "insert current date" })
vim.keymap.set("n", "<leader>st", ":set spell!<CR>", { desc = "toggle spell checking" })
vim.keymap.set("n", "[d", vim.diagnostic.goto_prev, { desc = "go to previous diagnostic" })
vim.keymap.set("n", "]d", vim.diagnostic.goto_next, { desc = "go to next diagnostic" })
vim.keymap.set("n", "<leader>q", vim.diagnostic.setqflist, { desc = "send all diagnostics to the quickfix list" })
vim.keymap.set("n", "[e", function()
  vim.diagnostic.goto_prev({ severity = vim.diagnostic.severity.ERROR })
end, { desc = "go to previous diagnostic error" })
vim.keymap.set("n", "]e", function()
  vim.diagnostic.goto_next({ severity = vim.diagnostic.severity.ERROR })
end, { desc = "go to next diagnostic error" })
vim.keymap.set("n", "<up>", ":echoerr 'use h j k l ðŸ˜ƒ'<CR>", { desc = "disable arrow keys in normal mode" })
vim.keymap.set("n", "<down>", ":echoerr 'use h j k l ðŸ˜ƒ'<CR>", { desc = "disable arrow keys in normal mode" })
vim.keymap.set("n", "<left>", ":echoerr 'use h j k l ðŸ˜ƒ'<CR>", { desc = "disable arrow keys in normal mode" })
vim.keymap.set("n", "<right>", ":echoerr 'use h j k l ðŸ˜ƒ'<CR>", { desc = "disable arrow keys in normal mode" })
vim.keymap.set("n", "<leader>y_", "^yg_", { desc = "yank line without leading or trailing spaces" })
vim.keymap.set("n", "[q", ":cprev<CR>", { desc = "quickfix list previous item" })
vim.keymap.set("n", "[Q", ":cfirst<CR>", { desc = "quickfix list first item" })
vim.keymap.set("n", "]q", ":cnext<CR>", { desc = "quickfix list next item" })
vim.keymap.set("n", "]Q", ":clast<CR>", { desc = "quickfix list last item" })
vim.keymap.set("n", "<leader>[", ":copen<CR>", { desc = "open quickfix list" })
vim.keymap.set("n", "<leader>]", ":cclose<CR>", { desc = "close quickfix list" })
vim.keymap.set("n", "<A-j>", ":m .+1<CR>==", { desc = "move current line down" })
vim.keymap.set("n", "<A-k>", ":m .-2<CR>==", { desc = "move current line up" })
vim.keymap.set("i", "<A-j>", "<ESC>:m .+1<CR>==gi", { desc = "move current line down" })
vim.keymap.set("i", "<A-k>", "<ESC>:m .-2<CR>==gi", { desc = "move current line up" })
vim.keymap.set("v", "<A-j>", ":m '>+1<CR>gv=gv", { desc = "move current line down" })
vim.keymap.set("v", "<A-k>", ":m '<-2<CR>gv=gv", { desc = "move current line up" })
vim.keymap.set("n", "<C-u>", "<C-u>zz", { desc = "page up and center" })
vim.keymap.set("n", "<C-d>", "<C-d>zz", { desc = "page down and center" })
vim.keymap.set("n", "n", "nzz", { desc = "move to next search result ocurrence and center line in the screen" })
